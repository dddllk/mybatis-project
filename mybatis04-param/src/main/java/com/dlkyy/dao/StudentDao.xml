<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dlkyy.dao.StudentDao">
    <!--
        parameterType="java.lang.Integer"
        dao接口接口中方法参数的数据类型
        parameterType它的值是java的数据类型全限定名称或者是mybatis定义的别名
        例如：parameterType = "java.lang.Integer"
              parameterType = "int"

         注意：parameterType可以不写
    -->
    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="com.dlkyy.entity.Student">
        select id,name,email,age from student where id = #{id}
    </select>

    <!--多个参数，使用@Param命名-->
    <select id="selectMultiParam" resultType="com.dlkyy.entity.Student">
        select id,name,email,age from student where name=#{myname} or age=#{myage}
    </select>

    <!--多个参数，使用java对象的属性值，作为参数实际值
        使用对象的语法：#{属性名,javaType=类型名称,jdbcType=数据类型} 很少用
        javaType：指java中的属性数据类型。
        jdbcType：在数据库中的数据类型。
        例如：
            #{paramName, javaType=java.lang.String,jdbcType=VARCHAR}

        使用简化方式：
            #{属性名}，javaType，jdbcType的值mybatis反射能获取，不用提供
    -->
    <select id="selectMultiObjects" resultType="com.dlkyy.entity.Student">
        select id,name,age,email from student where
            name=#{paramName}
            or age=#{paramAge}
    </select>

    <!--多个参数使用位置-->
    <select id="selectMultiPosition" resultType="com.dlkyy.entity.Student">
        select id,name,age,email from student where
            name=#{arg0} or age=#{arg1}
    </select>

    <!--多个参数使用Map-->

    <select id="selectMultiByMap" resultType="com.dlkyy.entity.Student">
        select id,name,age,email from student where
            name=#{myname} or age=#{myage}
    </select>
</mapper>



